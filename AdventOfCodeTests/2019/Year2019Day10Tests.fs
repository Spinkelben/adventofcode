module Year2019Day10Tests

open System
open Xunit
open FsUnit.Xunit

let part1Values : obj array seq =
    seq {
        yield [| seq { 
            ".#..#";
            ".....";
            "#####";
            "....#";
            "...##"; };
             "8"; |];
        yield [| seq { 
            "......#.#.";
            "#..#.#....";
            "..#######.";
            ".#.#.###..";
            ".#..#.....";
            "..#....#.#";
            "#..#....#.";
            ".##.#..###";
            "##...#..#.";
            ".#....####"; };
             "33"; |];
        yield [| seq { 
            "#.#...#.#.";
            ".###....#.";
            ".#....#...";
            "##.#.#.#.#";
            "....#.#.#.";
            ".##..###.#";
            "..#...##..";
            "..##....##";
            "......#...";
            ".####.###."; }; 
             "35"; |];
        yield [| seq { 
            ".#..#..###";
            "####.###.#";
            "....###.#.";
            "..###.##.#";
            "##.##.#.#.";
            "....###..#";
            "..#.#..#.#";
            "#..#.#.###";
            ".##...##.#";
            ".....#.#.."; }; 
             "41"; |];
        yield [| seq { 
           ".#..##.###...#######";
           "##.############..##.";
           ".#.######.########.#";
           ".###.#######.####.#.";
           "#####.##.#.##.###.##";
           "..#####..#.#########";
           "####################";
           "#.####....###.#.#.##";
           "##.#################";
           "#####.##.###..####..";
           "..######..##.#######";
           "####.##.####...##..#";
           ".#####..#.######.###";
           "##...#.##########...";
           "#.##########.#######";
           ".####.#.###.###.#.##";
           "....##.##.###..#####";
           ".#.#.###########.###";
           "#.#.#.#####.####.###";
           "###.##.####.##.#..##"; }; 
             "210"; |];
        
    }

let part2Values : obj array seq =
    seq {
        yield [| seq { 
            ".#..##.###...#######";
            "##.############..##.";
            ".#.######.########.#";
            ".###.#######.####.#.";
            "#####.##.#.##.###.##";
            "..#####..#.#########";
            "####################";
            "#.####....###.#.#.##";
            "##.#################";
            "#####.##.###..####..";
            "..######..##.#######";
            "####.##.####...##..#";
            ".#####..#.######.###";
            "##...#.##########...";
            "#.##########.#######";
            ".####.#.###.###.#.##";
            "....##.##.###..#####";
            ".#.#.###########.###";
            "#.#.#.#####.####.###";
            "###.##.####.##.#..##"; }; 
              "802"; |];
    }

[<Theory>]
[<MemberData("part1Values")>]
let ``Part1 Test`` (input :seq<string>, expected) =
    let part1, _ = Year2019Day10.main input
    part1 |> should equal expected

[<Theory>]
[<MemberData("part2Values")>]
let ``Part2 Test`` (input :seq<string>, expected) =
    let _, part2 = Year2019Day10.main input
    part2 |> should equal expected